package org.myorg;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map.Entry;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.io.MapWritable;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.LongWritable;
/**
 * Created by hongleyou on 2017/4/13.
 */
public class WordStripe {

    public static class MyReducer extends Reducer<Text, MapWritable, Text, Text> {

        @Override
        protected void reduce(Text item, Iterable<MapWritable> values,
                              Reducer<Text, MapWritable, Text, Text>.Context context)
                throws IOException, InterruptedException {
            MapWritable sumMap = new MapWritable();
            for (MapWritable v : values) {
                for (Entry<Writable, Writable> entry : v.entrySet()) {
                    if (sumMap.containsKey(entry.getKey())) {
                        int t = ((IntWritable) sumMap.get(entry.getKey())).get();
                        sumMap.put(entry.getKey(), new IntWritable(t
                                + ((IntWritable) entry.getValue()).get()));
                    } else {
                        sumMap.put(entry.getKey(), entry.getValue());
                    }
                }
            }
            String s = " : ";
            for (Entry<?, ?> entry : sumMap.entrySet()) {
                s += "| (" + entry.getKey() + ", " + entry.getValue() + ") | ";
            }
            context.write(item, new Text(s));
        }
    }

    public static class MyMapper extends Mapper<LongWritable, Text, Text, MapWritable> {

        HashMap<String, MapWritable> hashmap;

        @Override
        protected void setup(
                Mapper<LongWritable, Text, Text, MapWritable>.Context context)
                throws IOException, InterruptedException {
            hashmap = new HashMap<String, MapWritable>();
        }

        @Override
        protected void map(LongWritable key, Text value,
                           Mapper<LongWritable, Text, Text, MapWritable>.Context context)
                throws IOException, InterruptedException {
            String line = value.toString().trim();
            String[] input = line.split(" ");

            for (int i = 0; i < input.length; i++) {
                for (int j = i + 1; j < input.length && !input[i].equals(input[j]); j++) {

                    MapWritable mapWritable = hashmap.get(input[i]);
                    if (mapWritable == null) {
                        mapWritable = new MapWritable();
                        hashmap.put(input[i], mapWritable);
                    }

                    if (mapWritable.get(new Text(input[j])) == null) {
                        mapWritable.put(new Text(input[j]), new IntWritable(1));
                    } else {
                        IntWritable inWritable = (IntWritable) mapWritable
                                .get(new Text(input[j]));
                        mapWritable.put(new Text(input[j]), new IntWritable(
                                inWritable.get() + 1));
                    }
                }
            }
        }

        @Override
        protected void cleanup(
                Mapper<LongWritable, Text, Text, MapWritable>.Context context)
                throws IOException, InterruptedException {
            super.cleanup(context);
            for (Entry<String, MapWritable> entry : hashmap.entrySet()) {
                context.write(new Text(entry.getKey()), entry.getValue());
            }
        }
    }

    public static void main(String[] args) throws Exception {

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "StripeJob");
        job.setJarByClass(WordCount.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        job.setMapperClass(MyMapper.class);
        job.setReducerClass(MyReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        job.setMapOutputValueClass(MapWritable.class);
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
